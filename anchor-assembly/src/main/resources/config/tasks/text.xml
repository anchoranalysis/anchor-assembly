<!-- 
===================
TASK:   text
AUTHOR: Owen Feehan
===================

===========
DESCRIPTION
===========

Finds text-regions in RGB images.

It uses the EAST deep-CNN model via OpenCV, which generates a list of rotated bounding-boxes of proposed text regions,
each with a confidence score.

A non-maxima suppression algorithm reduces the proposals to a smaller set by eliminating significantly overlapping proposals.

The EAST model was designed to work with 1280x720 RBB images. The input image is scaled down to be approximately
similar in size.


======
INPUTS
======

input_image:
    A RGB stack


=======
OUTPUTS
=======

boxes:
    HDF5 obj-masks for all the bounding-boxes that are eventually accepted

mask:
    a binary-raster combining all the obj-masks above together

visualization_boxes:
    a green outline is imposed on the original RGB around each obj-mask that is accepted


-->
<config>
<bean config-class="org.anchoranalysis.plugin.mpp.experiment.bean.define.SegmentInstanceTask">
	<segment minConfidence="0.1" suppressIntersectionOverUnionAbove="0.3" config-class="org.anchoranalysis.plugin.opencv.bean.object.segment.stack.SegmentText"/>
</bean>

<!-- <bean config-class="org.anchoranalysis.plugin.mpp.experiment.bean.define.SharedObjectsMultiInputTask">
	<define config-class="org.anchoranalysis.mpp.segment.bean.define.DefineOutputterMPP" suppressSubfolders="true">
	    <define config-class="org.anchoranalysis.bean.define.Define" config-factory="define">
	
	        <list config-class="java.util.List" config-factory="list">
	
	            <item config-class="org.anchoranalysis.bean.NamedBean" name="boxes">
	            	<item config-class="org.anchoranalysis.plugin.image.bean.object.provider.segment.SegmentStack">
		                <segment minConfidence="0.1" suppressIntersectionOverUnionAbove="0.3" config-class="org.anchoranalysis.plugin.opencv.bean.object.segment.stack.SegmentText"/>
						<stack config-class="org.anchoranalysis.plugin.image.bean.stack.provider.FromInput"/>
	                </item>
	            </item>
	            
	            <item config-class="org.anchoranalysis.bean.NamedBean" name="mask">
	                <item config-class="org.anchoranalysis.plugin.image.bean.mask.provider.convert.FromObjects">
	                    <objects id="boxes" config-class="org.anchoranalysis.plugin.image.bean.object.provider.Reference"/>
	                </item>
	            </item>
	        
	            <item config-class="org.anchoranalysis.bean.NamedBean" name="visualization_boxes">
					<item config-class="org.anchoranalysis.plugin.image.bean.stack.provider.color.ColoredObjects">
						<background config-class="org.anchoranalysis.plugin.image.bean.stack.provider.FromInput"/>
						<objects id="boxes" config-class="org.anchoranalysis.plugin.image.bean.object.provider.Reference"/>
						<colors config-class="org.anchoranalysis.io.bean.color.generator.ColorSetGeneratorRGBColor">
						    <rgbColor red="0" green="255" blue="0" config-class="org.anchoranalysis.io.bean.color.RGBColorBean"/>
						</colors>
					</item>
	            </item>
	
	        </list>
	
	    </define>
    </define>
</bean>-->

</config>
