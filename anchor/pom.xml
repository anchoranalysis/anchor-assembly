<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
   <modelVersion>4.0.0</modelVersion>
     <parent>
        <groupId>org.anchoranalysis.anchor</groupId>
   	    <artifactId>anchor-parent-assembly</artifactId>
		<version>1.0.0-SNAPSHOT</version>
    </parent> 
	
  <artifactId>anchor</artifactId>
  <url>http://www.anchoranalysis.org/</url>
  <version>1.0.0-SNAPSHOT</version>
  
  <packaging>pom</packaging>

  <name>Anchor Distribution</name>
	
	  
  <dependencies>


	<dependency>
	  <groupId>${project.groupId}</groupId>
	  <artifactId>anchor-launcher</artifactId>
	  <version>1.0.0-SNAPSHOT</version>
	</dependency>
		
	
	<!-- GPL PLUGINS -->
	<!-- This is the MAIN LOCATION where we update the version of GPL plugins -->
	
	<dependency>
	  <groupId>${project.groupId}</groupId>
	  <artifactId>anchor-plugin-fiji</artifactId>
	  <version>1.0.0-SNAPSHOT</version>
	</dependency>
	
	<dependency>
	  <groupId>${project.groupId}</groupId>
	  <artifactId>anchor-plugin-io-gpl</artifactId>
	  <version>1.0.0-SNAPSHOT</version>
	</dependency>
	
			
		<!-- We add both onnxruntime dependencies (GPU and CPU) so the appropriate one can be removed later depending on operating system. -->
		<dependency>
			<groupId> com.microsoft.onnxruntime</groupId>
			<artifactId>onnxruntime</artifactId>
			<version>${onnx-runtime.version}</version>
		</dependency>
		
		<dependency>
			<groupId> com.microsoft.onnxruntime</groupId>
			<artifactId>onnxruntime_gpu</artifactId>
			<version>${onnx-runtime.version}</version>
		</dependency>
	
  </dependencies>
	
  <build>
    <plugins>
    
    	<!--  Unpack ONNX Runtime JAR, so the native libs can be copied into the respective disbiutions -->
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-dependency-plugin</artifactId>
         <version>3.2.0</version>
         <executions>
           <execution>
             <id>unpack</id>
             <phase>package</phase>
             <goals>
               <goal>unpack</goal>
             </goals>
             <configuration>
               <artifactItems>
                 <artifactItem>
                 
				   <groupId>com.microsoft.onnxruntime</groupId>
				   <artifactId>onnxruntime_gpu</artifactId>
				   <version>${onnx-runtime.version}</version>
                   <type>jar</type>
                   <overWrite>true</overWrite>
                 </artifactItem>
               </artifactItems>
               <outputDirectory>${project.build.directory}/onnxruntime</outputDirectory>
               <overWriteReleases>true</overWriteReleases>
               <overWriteSnapshots>true</overWriteSnapshots>
             </configuration>
           </execution>
         </executions>
       </plugin>
       
	
 <plugin>
	        <artifactId>maven-antrun-plugin</artifactId>
	        <version>3.0.0</version>
	        <executions>


						<execution>
							<id>prepare-package</id>
							<phase>prepare-package</phase>
							<configuration>
							  <target>
								
								<echo message="Deleting the windowsExe/ directory: ${project.build.directory}/windowsExe"/>
								<delete dir="${project.build.directory}/windowsExe/" />
								
								<echo message="Building EXES in: ${project.build.directory}/anchor-${project.version}/windowsExe"/>					
								<mkdir dir="${project.build.directory}/windowsExe" />
				
							  </target>
							</configuration>
							<goals>
							  <goal>run</goal>
							</goals>
						  </execution>

	          <!-- Automatically copies build files to a directory ${anchor.home.deploy} to make it
	             easier during development to update the distribution -->
	          <execution>
			  <id>install</id>
	            <phase>install</phase>
	            <configuration>
				
	              <target if="anchor.home.deploy">
	              	<!--  Deletes the existing deploy directory (to prevent multiple JARs as SNAPSHOTs resolve to timestamps 
	              			and copies necessary files inside.
	              			
	              			Lastly, makes the anchor binary executable on Linux
	              	-->

					<echo message="Deleting the directory: ${anchor.home.deploy}/"/>
					<delete dir="${anchor.home.deploy}/" />
					
					<echo message="Copying a distribution into: ${anchor.home.deploy}/"/>					
					<mkdir dir="${anchor.home.deploy}/" />
	
						<!--  We add in a ../ to bring us back to the top-level of the multi-module project -->
					  <copy todir="${anchor.home.deploy}/">
							<fileset dir="${project.build.directory}/anchor-${project.version}-windows/anchor-${project.version}/" />
					  </copy>
	
	              </target>
	            </configuration>
	            <goals>
	              <goal>run</goal>
	            </goals>
	          </execution>
	        </executions>
	      </plugin>	
	
	  <!-- Run Launch4J plugins before the assembly-plugin to make sure the .exes are included in the tar.gz and zip files. -->
	  <plugin>
		 <groupId>com.akathist.maven.plugins.launch4j</groupId>
		 <artifactId>launch4j-maven-plugin</artifactId>
		 <version>2.1.1</version>
		 <executions>
		 
		 <!-- This generates an anchor.exe (command-line) with Launch4J and places it in the target distribution -->
		 <execution>
				 <id>l4j-clui1</id>
				 <phase>prepare-package</phase>
				 <goals>
					 <goal>launch4j</goal>
				 </goals>
				 <configuration>
					  <headerType>console</headerType>
					  <outfile>${project.build.directory}/windowsExe/anchor.exe</outfile>
					  <jar>anchor-launcher</jar>
					  <dontWrapJar>true</dontWrapJar>
					  <errTitle>Anchor</errTitle>
					  <downloadUrl>http://java.com/download</downloadUrl>
					
					  <classPath>
						<mainClass>org.anchoranalysis.launcher.Launch</mainClass>
						<postCp>%EXEDIR%/*.jar;%EXEDIR%/../lib/*.jar</postCp>
						<addDependencies>false</addDependencies>
					  </classPath>
					  
					  <jre>
						<minVersion>1.8</minVersion>
						<initialHeapPercent>20</initialHeapPercent>
						<maxHeapPercent>80</maxHeapPercent>
						<opts>
							<opt>-Donnxruntime.native.path=%EXEDIR%/../lib/onnxruntime</opt>
						</opts>
					  </jre>
				 </configuration>
			 </execution>
			 
		 </executions>
	 </plugin>	
	
      <!-- Creates a folder with all the files needed for running Anchor in target/ -->
      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <executions>
          <execution>
            <id>make-assembly</id>
            <goals>
              <goal>single</goal>
            </goals>
            <phase>package</phase>
            <configuration>
              <descriptors>
                <descriptor>src/assembly/windows.xml</descriptor>
                <descriptor>src/assembly/macos.xml</descriptor>
                <descriptor>src/assembly/linux.xml</descriptor>
              </descriptors>
              <attach>true</attach>
            </configuration>
          </execution>
        </executions>
      </plugin>
     
	    
		<!-- Force a clean to occur before any deploy -->
		  <plugin>
			<artifactId>maven-clean-plugin</artifactId>
			<version>2.4.1</version>
			<executions>
			  <execution>
				<id>auto-clean</id>
				<phase>initialize</phase>
				<goals>
				  <goal>clean</goal>
				</goals>
			  </execution>
			</executions>
		  </plugin>
	  
    </plugins>
  </build>
  
</project>