<?xml version="1.0" encoding="ISO-8859-1" ?>
<config>
<bean config-class="java.util.List" config-factory="list">

	<!-- 
	
	   Read images using OpenCV for file-formats it supports, especially BMP (because the BioformatsReader fails on certain types),
	   but in general, because it's faster than Bioformats.
	   
	   We avoid using OpenCV to open tiffs, as Bioformats processed 3D or time-stacks in a superior way than OpenCVReader.
	   
	   Otherwise Bioformats is used to read files.
	   
	   The OpenCVReader will correct orientation if an EXIF tag is present. We wrap the BioformatsReader in a
	   RotateImageToMatchEXIFOrientation to achieve a similar outcome.
	   
	 -->
	<item config-class="org.anchoranalysis.bean.NamedBean" name="org.anchoranalysis.image.io.bean.stack.reader.StackReader">
		<item config-class="org.anchoranalysis.plugin.io.bean.stack.reader.BranchExtension">
		
			<!--  
				These are all extensions supported by OpenCV excluding TIFFs.
				
				See https://docs.opencv.org/4.2.0/d4/da8/group__imgcodecs.html#ga288b8b3da0892bd651fce07b3bbd3a56
			 -->
			<extensions config-class="org.anchoranalysis.bean.primitive.StringSet" config-factory="stringSet">
				<item>bmp</item>
				<item>dib</item>
				<item>jpg</item>
				<item>jpeg</item>
				<item>jpee</item>
				<item>png</item>
				<item>gif</item>
				<item>jp2</item>
				<item>webp</item>
				<item>pbm</item>
				<item>pgm</item>
				<item>pxm</item>
				<item>pnm</item>
				<item>pfm</item>
				<item>sr</item>
				<item>ras</item>
				<item>exr</item>
				<item>hdr</item>
				<item>pic</item>
			</extensions>		
			<readerMatching config-class="org.anchoranalysis.plugin.opencv.bean.stack.OpenCVReader"/>
			<readerNotMatching config-class="org.anchoranalysis.plugin.io.bean.stack.reader.RotateImageToMatchEXIFOrientation">
				<reader config-class="org.anchoranalysis.io.bioformats.bean.BioformatsReader">
					<options config-class="org.anchoranalysis.io.bioformats.bean.options.ForceBitsPerPixel" bitsPerPixel="8">
						<options config-class="org.anchoranalysis.io.bioformats.bean.options.ForceTimeSeriesToStack"/>
					</options>
				</reader>
			</readerNotMatching>
		</item>
	</item>
	
	<!-- 
	
	  Write PNGs (for single or three-channeled 2D images) or Tiffs (for single or three-channeled 3D images) or OME-TIFFs for everything else.
	  
	  In two cases (single-channeled or RGB-images that are always 2D), the user can
	  suggest a file-format that is used for performing the output.  If no suggestion
	  is made the default is used. 
	-->
	<item config-class="org.anchoranalysis.bean.NamedBean" name="org.anchoranalysis.image.io.bean.stack.writer.StackWriter">
		<item config-class="org.anchoranalysis.plugin.io.bean.stack.writer.BranchChannels">
			
			<!--  Catch all writer that can support almost any combination of channels / stacks  -->
			<writer config-class="org.anchoranalysis.io.bioformats.bean.writer.OMETiff"/>

			<!-- When not eight bit, use OME-TIFFs -->
			<whenNotEightBit config-class="org.anchoranalysis.io.bioformats.bean.writer.OMETiff"/>
			
			<!-- If it's guaranteed to be RGB (three channels) use a PNG (by default) if guaranteed to be 2D, or a TIFF otherwise -->
			<whenRGB config-class="org.anchoranalysis.plugin.io.bean.stack.writer.BranchStack">

				<!-- If the user suggests an alternative format, then use any of these in the 2D case... -->				
				<writerAlways2D config-class="org.anchoranalysis.plugin.io.bean.stack.writer.BranchSuggestedFormat">
					<writersIfSuggested config-class="java.util.List" config-factory="list">
						<item extension="png" config-class="org.anchoranalysis.plugin.opencv.bean.stack.OpenCVWriter"/>
						<item config-class="org.anchoranalysis.io.bioformats.bean.writer.Tiff"/>
						<item extension="jpg" config-class="org.anchoranalysis.plugin.opencv.bean.stack.OpenCVWriter"/>
						<item extension="bmp" config-class="org.anchoranalysis.plugin.opencv.bean.stack.OpenCVWriter"/>
						<item config-class="org.anchoranalysis.io.bioformats.bean.writer.OMETiff"/>
					</writersIfSuggested>
					<!-- The default if no format is suggested -->
					<writerIfNoSuggestion extension="png" config-class="org.anchoranalysis.plugin.opencv.bean.stack.OpenCVWriter"/>
				</writerAlways2D>
				<writerElse config-class="org.anchoranalysis.io.bioformats.bean.writer.Tiff"/>
			</whenRGB>
			
			<!-- No writer implementation currently writes the alpha channel nicely, so write as 4-channeled OME-TIFF (for now). -->
			<whenRGBAlpha config-class="org.anchoranalysis.io.bioformats.bean.writer.OMETiff"/>
			
			<!-- Likewise if it's guaranteed to be three channels and not RGB use a TIFF -->
			<whenThreeChannels config-class="org.anchoranalysis.plugin.io.bean.stack.writer.BranchSuggestedFormat">
				<writersIfSuggested config-class="java.util.List" config-factory="list">
					<item config-class="org.anchoranalysis.io.bioformats.bean.writer.Tiff"/>
					<item config-class="org.anchoranalysis.io.bioformats.bean.writer.OMETiff"/>
					<item config-class="org.anchoranalysis.io.bioformats.bean.writer.OMEXML"/>
				</writersIfSuggested>
				<!-- The default if no format is suggested -->
				<writerIfNoSuggestion config-class="org.anchoranalysis.io.bioformats.bean.writer.Tiff"/>
			</whenThreeChannels>
				
			<!-- Likewise if it's guaranteed to be a single non-binary channel, use a PNG (by default) if guaranteed to be 2D, or a TIFF otherwise -->
			<whenSingleChannel config-class="org.anchoranalysis.plugin.io.bean.stack.writer.BranchStack">

				<!-- If the user suggests an alternative format, then use any of these in the 2D case... -->
				<writerAlways2D config-class="org.anchoranalysis.plugin.io.bean.stack.writer.BranchSuggestedFormat">
					<writersIfSuggested config-class="java.util.List" config-factory="list">
						<item extension="png" config-class="org.anchoranalysis.plugin.opencv.bean.stack.OpenCVWriter"/>
						<item config-class="org.anchoranalysis.io.bioformats.bean.writer.Tiff"/>
						<item extension="jpg" config-class="org.anchoranalysis.plugin.opencv.bean.stack.OpenCVWriter"/>
						<item extension="bmp" config-class="org.anchoranalysis.plugin.opencv.bean.stack.OpenCVWriter"/>
						<item config-class="org.anchoranalysis.io.bioformats.bean.writer.OMETiff"/>
						<item config-class="org.anchoranalysis.io.bioformats.bean.writer.OMEXML"/>
					</writersIfSuggested>
					<!-- The default if no format is suggested -->
					<writerIfNoSuggestion config-class="org.anchoranalysis.io.imagej.bean.stack.writer.PNG"/>
				</writerAlways2D>
				<writerElse config-class="org.anchoranalysis.io.bioformats.bean.writer.Tiff"/>
			</whenSingleChannel>
									
			<!-- Likewise if it's guaranteed to be a single binary channel, use a PNG if guaranteed to be 2D, or a TIFF otherwise -->
			<whenBinaryChannel config-class="org.anchoranalysis.plugin.io.bean.stack.writer.BranchStack">
				<writerAlways2D extension="png" config-class="org.anchoranalysis.plugin.opencv.bean.stack.OpenCVWriter"/>
				<writerElse config-class="org.anchoranalysis.io.bioformats.bean.writer.Tiff"/>
			</whenBinaryChannel>
		</item>
	</item>
	
	
	<!-- 
	   Default naming of inputs from filename.
	   
	   Unique names is inferring from the minimally varying part of the filenames (e.g. an incrementing integer, varying string etc.).
	   
	   An option uses the entire relative filename/path to a directory. 
	 -->
	<item config-class="org.anchoranalysis.bean.NamedBean" name="org.anchoranalysis.io.input.bean.namer.FileNamer">
		<item config-class="org.anchoranalysis.plugin.io.bean.file.namer.SubsetRangeIfRequested">
			<namer config-class="org.anchoranalysis.plugin.io.bean.file.namer.RemoveExtension">
				<namer config-class="org.anchoranalysis.plugin.io.bean.file.namer.IfRelativeToDirectory">
					<whenRelative config-class="org.anchoranalysis.plugin.io.bean.file.namer.RelativeToDirectory"/>
					<otherwise config-class="org.anchoranalysis.plugin.io.bean.file.namer.patternspan.PatternSpan"/>
				</namer>
			</namer>
		</item>
	</item>
		
	
	<!-- 
	   
	   Try to infer the image-metadata from the header for JPEG, PNG, BMP (see default formats in InferFromHeader).
	    	
	   Otherwise, read image-metadata using the default StackReader.
	   	   	   
	   The former is preferable as it is usually computationally quicker (sometimes much quicker) than the latter.
	   
	 -->
	<item config-class="org.anchoranalysis.bean.NamedBean" name="org.anchoranalysis.image.io.bean.stack.metadata.reader.ImageMetadataReader">
		<item config-class="org.anchoranalysis.plugin.io.bean.metadata.reader.InferFromHeader">
			<formats config-class="java.util.List" config-factory="list">
				<item config-class="org.anchoranalysis.plugin.io.bean.metadata.header.JPEG"/>
				<item config-class="org.anchoranalysis.plugin.io.bean.metadata.header.PNG"/>
				<item config-class="org.anchoranalysis.plugin.io.bean.metadata.header.BMP"/>
			</formats>
			<fallback config-class="org.anchoranalysis.plugin.io.bean.metadata.reader.FromStackReader"/>
		</item>
	</item>
	
	<!-- 
		Perform interpolation by default with OpenCV as it provides the fastest implementation (native code0
		despite some redundant memory allocationg and copying, switching from Anchor's structures to OpenCV's.
	 -->
	<item config-class="org.anchoranalysis.bean.NamedBean" name="org.anchoranalysis.image.bean.interpolator.Interpolator">
		<item config-class="org.anchoranalysis.plugin.opencv.bean.interpolate.OpenCV"/>
	</item>
	
</bean>
</config>